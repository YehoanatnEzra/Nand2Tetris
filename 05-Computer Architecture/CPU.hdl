// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	//first Mux
	Mux16(a = instruction, b = outMcpy, sel= instruction[15], out= inA);

	//A register
	Not(in=instruction[15], out=notinst15);
	And(a=instruction[5], b=instruction[15], out=InstC);
	Or(a=notinst15, b=InstC, out=loada);	
	ARegister(in= inA, load = loada, out = outA, out[0..14] = addressM); 

	//D register
	And(a=instruction[4], b=instruction[15], out=LoadD);
	DRegister(in= outMcpy, load = LoadD, out= outD);

	//second Mux
	And(a=instruction[12], b=instruction[15], out=inst12Andinst15);
	Mux16(a= outA, b= inM, sel= inst12Andinst15, out = aluiny); 

	//Alu
	ALU(x= outD, y= aluiny, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= 	instruction[7], no= instruction[6], out= outM, out=outMcpy, zr = zr, ng = ng);

	//writeM
	And(a= instruction[3], b=instruction[15], out = writeM);
	
	//JGT
	Not(in=zr, out=notzr);
	Not(in=ng, out=notng);
	And(a=notzr, b=notng, out= JGT);

	//JEQ
	And(a=zr, b=zr, out= JEQ);

	//JGE
	Not(in=ng, out= JGE);

	//JLT
	And(a=ng, b=notzr, out= JLT);

	//JNE
	Not(in=zr, out= JNE);

	//JLE
	Or(a=zr, b=ng, out= JLE);

	//choosing condition (kind of mux 8 way)
	Mux(a=false,b=JGT,sel=instruction[0],out=q1); 
   	Mux(a=JEQ,b=JGE,sel=instruction[0],out=q2);
	Mux(a=JLT,b=JNE,sel=instruction[0],out=q3); 
   	Mux(a=JLE,b=true,sel=instruction[0],out=q4);
	Mux(a=q1,b=q2,sel=instruction[1],out=semi1);
	Mux(a=q3,b=q4,sel=instruction[1],out=semi2);
	Mux(a=semi1,b=semi2,sel=instruction[2],out=conditionf);
	
	//PC
	And(a=conditionf, b=instruction[15], out=conditionfAndinst15);
	Not(in=conditionfAndinst15, out= increment);
	PC(in= outA, load= conditionfAndinst15, inc= increment, reset= reset, out[0..14]= pc);
}